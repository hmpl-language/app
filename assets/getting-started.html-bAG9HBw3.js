import{_ as p,c as r,b as e,a as t,k as n,l as a,m as o,n as i,o as c}from"./app-lD-1NyUs.js";const d={};function m(u,s){const l=i("RouteLink");return c(),r("div",null,[s[20]||(s[20]=e("h1",{id:"getting-started",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getting-started"},[e("span",null,"Getting started")])],-1)),e("p",null,[s[1]||(s[1]=n("This guide will help you quickly set up and start using HMPL to dynamically render UI components from the server. You can install HMPL either manually via the methods described in the ")),a(l,{to:"/installation.html"},{default:o(()=>s[0]||(s[0]=[n("Installation")])),_:1}),s[2]||(s[2]=n(" section or via the starter project template."))]),s[21]||(s[21]=t(`<ul><li><a href="#local-setup">Local Setup</a></li><li><a href="#rendering-your-first-component">Rendering Your First Component</a></li><li><a href="#rendering-dynamic-components">Rendering Dynamic Components</a></li></ul><h2 id="local-setup" tabindex="-1"><a class="header-anchor" href="#local-setup"><span>Local Setup</span></a></h2><p>To setup a local HMPL project, run the following commands:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#ffffff;color:#24292eff;"><pre class="shiki min-light vp-code"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#2B5581;"> degit</span><span style="color:#2B5581;"> hmpl-language/hello-hmpl-starter</span><span style="color:#2B5581;"> hello-hmpl</span></span>
<span class="line"><span style="color:#6F42C1;">cd</span><span style="color:#2B5581;"> hello-hmpl</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#2B5581;"> install</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#2B5581;"> run</span><span style="color:#2B5581;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will:</p><ul><li>Download a starter template for HMPL.</li><li>Install the necessary dependencies.</li><li>Start the Vite dev server.</li></ul><p>Once server is running, open your browser at Vite&#39;s server URL (printed in the terminal). Now let&#39;s create our first component.</p><h2 id="rendering-your-first-component" tabindex="-1"><a class="header-anchor" href="#rendering-your-first-component"><span>Rendering Your First Component</span></a></h2><h3 id="_1-create-an-hmpl-template" tabindex="-1"><a class="header-anchor" href="#_1-create-an-hmpl-template"><span>1. Create an HMPL template</span></a></h3><p>Create a file named <code>HelloWorld.hmpl</code> inside <code>/src/hmpl</code> and add the following code:</p><div class="language-hmpl line-numbers-mode" data-highlighter="shiki" data-ext="hmpl" data-title="hmpl" style="background-color:#ffffff;color:#24292eff;"><pre class="shiki min-light vp-code"><code><span class="line"><span style="color:#24292EFF;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">    {</span></span>
<span class="line"><span style="color:#24292EFF;">      {</span></span>
<span class="line"><span style="color:#24292EFF;">        src: &quot;/api/hello&quot;,</span></span>
<span class="line"><span style="color:#24292EFF;">        indicators: [</span></span>
<span class="line"><span style="color:#24292EFF;">          {</span></span>
<span class="line"><span style="color:#24292EFF;">            trigger: &quot;pending&quot;,</span></span>
<span class="line"><span style="color:#24292EFF;">            content: &quot;&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292EFF;">&gt;Loading...&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292EFF;">&gt;;&quot;</span></span>
<span class="line"><span style="color:#24292EFF;">          },</span></span>
<span class="line"><span style="color:#24292EFF;">          {</span></span>
<span class="line"><span style="color:#24292EFF;">            trigger: &quot;rejected&quot;,</span></span>
<span class="line"><span style="color:#24292EFF;">            content: &quot;&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292EFF;">&gt;Error!&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292EFF;">&gt;;&quot;</span></span>
<span class="line"><span style="color:#24292EFF;">          }</span></span>
<span class="line"><span style="color:#24292EFF;">        ]</span></span>
<span class="line"><span style="color:#24292EFF;">      }</span></span>
<span class="line"><span style="color:#24292EFF;">    }</span></span>
<span class="line"><span style="color:#24292EFF;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292EFF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>src</code>: Specifies the API endpoint (<code>/api/hello</code>), From where the component will be fetched.</li><li><code>indicators</code>: Defines UI elements for different request states: <ul><li><code>&quot;pending&quot;</code> → Shows the <strong>Loading</strong> component while waiting for a response.</li><li><code>&quot;rejected&quot;</code>: → Show the <strong>Error</strong> component if the request fails.</li></ul></li></ul><h3 id="_2-load-the-component-into-dom" tabindex="-1"><a class="header-anchor" href="#_2-load-the-component-into-dom"><span>2. Load the component into DOM</span></a></h3><p>Open <code>main.js</code> inside the <code>src</code> folder and import the component:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#ffffff;color:#24292eff;"><pre class="shiki min-light vp-code"><code><span class="line"><span style="color:#D32F2F;">import</span><span style="color:#24292EFF;"> helloWorld </span><span style="color:#D32F2F;">from</span><span style="color:#22863A;"> &quot;./hmpl/HelloWorld.hmpl&quot;</span><span style="color:#24292EFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D32F2F;">const</span><span style="color:#24292EFF;"> { </span><span style="color:#1976D2;">response</span><span style="color:#24292EFF;"> } </span><span style="color:#D32F2F;">=</span><span style="color:#6F42C1;"> helloWorld</span><span style="color:#24292EFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1976D2;">document</span><span style="color:#6F42C1;">.</span><span style="color:#1976D2;">body</span><span style="color:#6F42C1;">.appendChild</span><span style="color:#24292EFF;">(response);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)),e("p",null,[s[5]||(s[5]=n("We import ")),s[6]||(s[6]=e("code",null,"HelloWorld",-1)),s[7]||(s[7]=n(" as a ")),a(l,{to:"/types.html#hmpltemplatefunction"},{default:o(()=>s[3]||(s[3]=[n("HMPL template function")])),_:1}),s[8]||(s[8]=n(". To make the request to server we invoke this template function. It returns a ")),a(l,{to:"/types.html#hmplinstance"},{default:o(()=>s[4]||(s[4]=[n("HMPL instance object")])),_:1}),s[9]||(s[9]=n(" and the ")),s[10]||(s[10]=e("code",null,"response",-1)),s[11]||(s[11]=n(" property holds the components received from server and the request state indicator components."))]),s[22]||(s[22]=t(`<p>Saving the files will render the component received from the server.</p><blockquote><p>The responses are served by a mock server located in the <code>/mock</code> directory. You can modify these mock API responses to test different scenarios.</p></blockquote><h2 id="rendering-dynamic-components" tabindex="-1"><a class="header-anchor" href="#rendering-dynamic-components"><span>Rendering Dynamic Components</span></a></h2><h3 id="_1-create-a-form-component" tabindex="-1"><a class="header-anchor" href="#_1-create-a-form-component"><span>1. Create a Form Component</span></a></h3><p>Create a new file <code>Form.hmpl</code> inside the <code>hmpl</code> directory and add the following code:</p><div class="language-hmpl line-numbers-mode" data-highlighter="shiki" data-ext="hmpl" data-title="hmpl" style="background-color:#ffffff;color:#24292eff;"><pre class="shiki min-light vp-code"><code><span class="line"><span style="color:#24292EFF;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">  &lt;</span><span style="color:#22863A;">form</span><span style="color:#6F42C1;"> id</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;form&quot;</span><span style="color:#6F42C1;"> onsubmit</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;</span><span style="color:#1976D2;">event</span><span style="color:#6F42C1;">.preventDefault</span><span style="color:#22863A;">()&quot;</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;text&quot;</span><span style="color:#6F42C1;"> name</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;name&quot;</span><span style="color:#6F42C1;"> placeholder</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;Enter your name&quot;</span><span style="color:#24292EFF;"> /&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">input</span><span style="color:#6F42C1;"> type</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;submit&quot;</span><span style="color:#6F42C1;"> value</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;Submit&quot;</span><span style="color:#24292EFF;"> /&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">  &lt;/</span><span style="color:#22863A;">form</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292EFF;">  {</span></span>
<span class="line"><span style="color:#24292EFF;">    {</span></span>
<span class="line"><span style="color:#24292EFF;">      src: &quot;/api/hello&quot;,</span></span>
<span class="line"><span style="color:#24292EFF;">      method: &quot;POST&quot;,</span></span>
<span class="line"><span style="color:#24292EFF;">      after: &quot;submit:#form&quot;,</span></span>
<span class="line"><span style="color:#24292EFF;">      autoBody: true,</span></span>
<span class="line"><span style="color:#24292EFF;">      indicators: [</span></span>
<span class="line"><span style="color:#24292EFF;">        {</span></span>
<span class="line"><span style="color:#24292EFF;">          trigger: &quot;pending&quot;,</span></span>
<span class="line"><span style="color:#24292EFF;">          content: &quot;&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292EFF;">&gt;Loading...&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292EFF;">&gt;;&quot;</span></span>
<span class="line"><span style="color:#24292EFF;">        }</span></span>
<span class="line"><span style="color:#24292EFF;">      ]</span></span>
<span class="line"><span style="color:#24292EFF;">    }</span></span>
<span class="line"><span style="color:#24292EFF;">  }</span></span>
<span class="line"><span style="color:#24292EFF;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292EFF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>method</code>: → Sets the request method (POST).</li><li><code>after: &quot;submit:#form&quot;</code> → Schedules requests on the form submit event.</li><li><code>autoBody: true</code> → Automatically converts form data into JSON before sending.</li></ul><h3 id="_2-load-the-form-component-to-dom" tabindex="-1"><a class="header-anchor" href="#_2-load-the-form-component-to-dom"><span>2. Load the Form Component to DOM</span></a></h3><p>Edit <code>main.js</code> to include the form component:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#ffffff;color:#24292eff;"><pre class="shiki min-light vp-code"><code><span class="line"><span style="color:#D32F2F;">import</span><span style="color:#24292EFF;"> helloWorldTemplate </span><span style="color:#D32F2F;">from</span><span style="color:#22863A;"> &#39;./hmpl/HelloWorld.hmpl&#39;</span><span style="color:#24292EFF;">;</span></span>
<span class="line"><span style="color:#D32F2F;">import</span><span style="color:#24292EFF;"> formTemplate </span><span style="color:#D32F2F;">from</span><span style="color:#22863A;"> &#39;./hmpl/Form.hmpl&#39;</span><span style="color:#24292EFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D32F2F;">const</span><span style="color:#24292EFF;"> { response: </span><span style="color:#1976D2;">response</span><span style="color:#1976D2;"> as</span><span style="color:#1976D2;"> helloWorld</span><span style="color:#24292EFF;"> } </span><span style="color:#D32F2F;">=</span><span style="color:#6F42C1;"> helloWorldTemplate</span><span style="color:#24292EFF;">();</span></span>
<span class="line"><span style="color:#D32F2F;">const</span><span style="color:#24292EFF;"> { response: </span><span style="color:#1976D2;">response</span><span style="color:#1976D2;"> as</span><span style="color:#1976D2;"> formEl</span><span style="color:#24292EFF;"> } </span><span style="color:#D32F2F;">=</span><span style="color:#6F42C1;"> helloWorldTemplate</span><span style="color:#24292EFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1976D2;">document</span><span style="color:#6F42C1;">.</span><span style="color:#1976D2;">body</span><span style="color:#6F42C1;">.appendChild</span><span style="color:#24292EFF;">(helloWorld);</span></span>
<span class="line"><span style="color:#1976D2;">document</span><span style="color:#6F42C1;">.</span><span style="color:#1976D2;">body</span><span style="color:#6F42C1;">.appendChild</span><span style="color:#24292EFF;">(formEl);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-submit-the-form" tabindex="-1"><a class="header-anchor" href="#_3-submit-the-form"><span>3. Submit the form</span></a></h3><ul><li>Fill your name and click <strong>Submit</strong>.</li><li>You should see the response greeting appear.</li></ul><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources"><span>Resources</span></a></h2><p><a href="https://github.com/hmpl-language/hello-hmpl-starter" target="_blank" rel="noopener noreferrer">Starter Project Template Repository</a></p><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><p>Now that you’ve set up your first components, here’s what you can explore next:</p>`,16)),e("ul",null,[e("li",null,[s[13]||(s[13]=n("📖 ")),a(l,{to:"/hmpl.html"},{default:o(()=>s[12]||(s[12]=[n("Learn more about HMPL")])),_:1}),s[14]||(s[14]=n(" – Understand how HMPL works under the hood."))]),e("li",null,[s[16]||(s[16]=n("🛠️ ")),a(l,{to:"/examples.html"},{default:o(()=>s[15]||(s[15]=[n("Explore other examples")])),_:1}),s[17]||(s[17]=n(" – See other use cases and patterns."))]),s[18]||(s[18]=e("li",null,[n("📰 "),e("a",{href:"https://blog.hmpl-lang.dev",target:"_blank",rel:"noopener noreferrer"},"Read our blog"),n(" – Stay updated with the latest HMPL features and best practices.")],-1)),s[19]||(s[19]=e("li",null,[n("🌱 "),e("a",{href:"https://github.com/hmpl-language/hmpl",target:"_blank",rel:"noopener noreferrer"},"Contribute to HMPL"),n(" – Help improve HMPL by reporting issues, suggesting features, or contributing code!")],-1))])])}const y=p(d,[["render",m],["__file","getting-started.html.vue"]]),h=JSON.parse('{"path":"/getting-started.html","title":"Getting started","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Local Setup","slug":"local-setup","link":"#local-setup","children":[]},{"level":2,"title":"Rendering Your First Component","slug":"rendering-your-first-component","link":"#rendering-your-first-component","children":[{"level":3,"title":"1. Create an HMPL template","slug":"_1-create-an-hmpl-template","link":"#_1-create-an-hmpl-template","children":[]},{"level":3,"title":"2. Load the component into DOM","slug":"_2-load-the-component-into-dom","link":"#_2-load-the-component-into-dom","children":[]}]},{"level":2,"title":"Rendering Dynamic Components","slug":"rendering-dynamic-components","link":"#rendering-dynamic-components","children":[{"level":3,"title":"1. Create a Form Component","slug":"_1-create-a-form-component","link":"#_1-create-a-form-component","children":[]},{"level":3,"title":"2. Load the Form Component to DOM","slug":"_2-load-the-form-component-to-dom","link":"#_2-load-the-form-component-to-dom","children":[]},{"level":3,"title":"3. Submit the form","slug":"_3-submit-the-form","link":"#_3-submit-the-form","children":[]}]},{"level":2,"title":"Resources","slug":"resources","link":"#resources","children":[]},{"level":2,"title":"Next Steps","slug":"next-steps","link":"#next-steps","children":[]}],"git":{},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"getting-started.md"}');export{y as comp,h as data};
